import{_ as a,o as i,c as l,M as e}from"./chunks/framework.dbe94cdc.js";const m=JSON.parse('{"title":"诞生","description":"","frontmatter":{},"headers":[],"relativePath":"大前端/JavaScript/01.介绍篇.md","lastUpdated":1701184317000}'),t={name:"大前端/JavaScript/01.介绍篇.md"},r=e('<h1 id="诞生" tabindex="-1">诞生 <a class="header-anchor" href="#诞生" aria-label="Permalink to &quot;诞生&quot;">​</a></h1><ul><li>诞生时间：1995</li><li>诞生背景 在网速最高只有28.8Kbit/s的年代,用户输入校验全部由浏览器提交给服务端，用户每次提交信息都是一次漫长的等待，如果用户输入的信息不符合要求，这将花费用户大部分时间，这时候就需要一门本地输入校验的语言来完成那些服务端的校验以提高用户体验，JavaScript运势而生。</li><li>诞生原因 网速奇慢，用户每次提交需要等待很长时间，体验不佳 需要本地化验证提升用户体验</li><li>名称由来 诞生一开始名称为LiveScript，但是为了蹭一蹭Java的热点，发布前夕改名为JavaScript</li><li>诞生公司：Netscape(网景通信公司)</li><li>诞生的浏览器环境：netscape navigator</li></ul><h1 id="三分天下" tabindex="-1">三分天下 <a class="header-anchor" href="#三分天下" aria-label="Permalink to &quot;三分天下&quot;">​</a></h1><p>网景的成功，让其他浏览器厂商争相效仿，其中最著名的微软的IE、ScriptEase</p><p>由于不同浏览器不同语言，使得开发非常困难，标准化JavaScript渐渐被提上日程</p><ul><li>JavaScript</li><li>Jsript</li><li>CEnvi</li></ul><h1 id="标准化" tabindex="-1">标准化 <a class="header-anchor" href="#标准化" aria-label="Permalink to &quot;标准化&quot;">​</a></h1><ul><li>时间：1997年</li><li>组织：ECMA 欧洲计算机制造商协会：European Computer Manufacturers Association 39号技术委员会：TC39，Technical Committee #69</li><li>规范：ECMA-262</li></ul><h1 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h1><h2 id="组成" tabindex="-1">组成 <a class="header-anchor" href="#组成" aria-label="Permalink to &quot;组成&quot;">​</a></h2><ul><li>核心ECMAScript</li><li>文档对象模型DOM</li><li>浏览器对象模型BOM</li></ul><h2 id="ecmascript" tabindex="-1">ECMAScript <a class="header-anchor" href="#ecmascript" aria-label="Permalink to &quot;ECMAScript&quot;">​</a></h2><h3 id="组成-1" tabindex="-1">组成 <a class="header-anchor" href="#组成-1" aria-label="Permalink to &quot;组成&quot;">​</a></h3><ul><li>语法</li><li>类型</li><li>语句</li><li>关键字</li><li>保留字</li><li>操作符</li><li>对象</li></ul><h3 id="版本" tabindex="-1">版本 <a class="header-anchor" href="#版本" aria-label="Permalink to &quot;版本&quot;">​</a></h3><ul><li>第一版 删除JavaScript1.1所有针对浏览器的并作出较小改动 要求支持Unicode，从而支持多语言开发 对象变成平台无关对象</li><li>第二版 第二版没做什么改动，主要是为了与ISO/IEC -1626保持严格一致</li><li>第三版 修改内容涉及字符串处理、错误定义、数值输出 新增对正则表达式、新控制语句、、try-catch异常处理的支持 围绕标准国际化做出一些改动</li><li>第四版 全面检核修订，在第三版基础上定义了一门新语言： 强类型变量 新语句 新数据结构 正真的类 经典的继承 无数据交互新方式</li><li>第五版 JSON对象 继承的方法和高级属性定义 严格模式</li></ul><h3 id="ecmascript兼容" tabindex="-1">ECMAScript兼容 <a class="header-anchor" href="#ecmascript兼容" aria-label="Permalink to &quot;ECMAScript兼容&quot;">​</a></h3><p>必须做到：</p><ol><li>支持ECMA-262所有“类型、值、对象、属性、函数以及程序语法和语句”</li><li>支持Unicode字符标注</li></ol><p>可以进行扩展（开发新语言，类似TS）：</p><ol><li>添加ECMA-262没有描述的“更多类型、值、对象、函数、属性”</li><li>支持ECMA-262没有定义的“程序和正则表达式语法”</li></ol><h3 id="浏览器支持" tabindex="-1">浏览器支持 <a class="header-anchor" href="#浏览器支持" aria-label="Permalink to &quot;浏览器支持&quot;">​</a></h3><h2 id="文档对象模型-dom" tabindex="-1">文档对象模型：DOM <a class="header-anchor" href="#文档对象模型-dom" aria-label="Permalink to &quot;文档对象模型：DOM&quot;">​</a></h2><h3 id="什么是文档对象模型" tabindex="-1">什么是文档对象模型 <a class="header-anchor" href="#什么是文档对象模型" aria-label="Permalink to &quot;什么是文档对象模型&quot;">​</a></h3><p>是针对XML但是经过扩展用于HTML的应用程序接口（API，Application Programming Interface）</p><h3 id="为什么用dom" tabindex="-1">为什么用DOM <a class="header-anchor" href="#为什么用dom" aria-label="Permalink to &quot;为什么用DOM&quot;">​</a></h3><p>由于IE和网景实现了不同形式的DHTML，如果这种形势不加以控制，web跨平台的特性江湖小时</p><h3 id="制定组织-w3c" tabindex="-1">制定组织：W3C <a class="header-anchor" href="#制定组织-w3c" aria-label="Permalink to &quot;制定组织：W3C&quot;">​</a></h3><p>Word Wide Web Consortium，万维网联盟，负责制定web通信标准的组织</p><h3 id="dom级别" tabindex="-1">DOM级别 <a class="header-anchor" href="#dom级别" aria-label="Permalink to &quot;DOM级别&quot;">​</a></h3><p>DOM并不是针对JavaScript，很多语言都实现了DOM。只不过，在web浏览器中，基于ECMAScript实现的DOM已经成为JavaScript的重要部分之一。 DOM0是最初IE4和网景4最初支持DHTML，DOM1以这个为参照编写而来</p><h4 id="dom1" tabindex="-1">DOM1 <a class="header-anchor" href="#dom1" aria-label="Permalink to &quot;DOM1&quot;">​</a></h4><p>1998年10月由W3C推行，由两个模块组成：DOM和DOM HTML DOM核心规定如何映射XML的文档结构，以便简化对文档的操作 DOM HMTL在DOM核心基础上加以扩展，添加了针对HTML的方法</p><h4 id="dom2" tabindex="-1">DOM2 <a class="header-anchor" href="#dom2" aria-label="Permalink to &quot;DOM2&quot;">​</a></h4><p>鼠标、用户界面事件 范围 遍历 操作CSS支持 新模块： DOM视图：跟踪不同文档视图的接口 DOM时间：事件和事件处理的接口 DOM样式：基于CSS为元素添加样式的接口 DOM遍历和范围：便利和操作文档树的接口</p><h4 id="dom3" tabindex="-1">DOM3 <a class="header-anchor" href="#dom3" aria-label="Permalink to &quot;DOM3&quot;">​</a></h4><p>统一方式加载和保存文档的方法：在DOM加载和保存模块中定义 验证文档方法：在DOM验证模块中定义 支持XML1.0规范</p><h3 id="其他dom标准" tabindex="-1">其他DOM标准 <a class="header-anchor" href="#其他dom标准" aria-label="Permalink to &quot;其他DOM标准&quot;">​</a></h3><ul><li>SVG，可升缩矢量图</li><li>MathML，数学标记语言</li><li>SMIL，XML用户界面语言</li></ul><h2 id="浏览器对象模型bom" tabindex="-1">浏览器对象模型BOM <a class="header-anchor" href="#浏览器对象模型bom" aria-label="Permalink to &quot;浏览器对象模型BOM&quot;">​</a></h2><ul><li>弹出浏览器窗口的功能</li><li>移动、缩放和关闭浏览器窗口的功能</li><li>提供浏览器详细信息的navigator对象</li><li>提供浏览器所加载页面的详细信息的location对象</li><li>提供用户显示分辨率详细信息的screen对象</li><li>对cookies的支持</li><li>想XMLHttpRequest和IE的ActiveXobject这样的自定义对象</li></ul>',41),o=[r];function h(c,n,d,s,u,p){return i(),l("div",null,o)}const b=a(t,[["render",h]]);export{m as __pageData,b as default};
