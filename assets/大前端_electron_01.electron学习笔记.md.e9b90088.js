import{_ as e,o,c as a,M as r}from"./chunks/framework.61b94509.js";const t="/blog/assets/img1.8c2e62b3.png",c="/blog/assets/img2.7ba06b23.png",s="/blog/assets/img.34c566c7.png",f=JSON.parse('{"title":"学习笔记","description":"","frontmatter":{},"headers":[],"relativePath":"大前端/electron/01.electron学习笔记.md","lastUpdated":1699369031000}'),d={name:"大前端/electron/01.electron学习笔记.md"},n=r('<h1 id="学习笔记" tabindex="-1">学习笔记 <a class="header-anchor" href="#学习笔记" aria-label="Permalink to &quot;学习笔记&quot;">​</a></h1><h2 id="架构原理" tabindex="-1">架构原理 <a class="header-anchor" href="#架构原理" aria-label="Permalink to &quot;架构原理&quot;">​</a></h2><h3 id="chromium架构" tabindex="-1">chromium架构 <a class="header-anchor" href="#chromium架构" aria-label="Permalink to &quot;chromium架构&quot;">​</a></h3><p><img src="'+t+'" alt="chromium架构图"> 一个浏览器中会有如下进程：</p><ul><li>一个browser进程（主进程）</li><li>多个render进程（渲染进程）</li></ul><p><strong>通信</strong>：进程间通过IPC通信进行通信，<code>RenderProcessHost</code>和<code>RenderProcess</code>专门用于处理IPC事件</p><p><strong>ResourceDispatcher</strong>：对资源请求进行处理</p><h3 id="electron架构" tabindex="-1">electron架构 <a class="header-anchor" href="#electron架构" aria-label="Permalink to &quot;electron架构&quot;">​</a></h3><p><img src="'+c+'" alt="electron架构图"></p><h3 id="node-js与chromiums事件融合" tabindex="-1">Node.js与Chromiums事件融合 <a class="header-anchor" href="#node-js与chromiums事件融合" aria-label="Permalink to &quot;Node.js与Chromiums事件融合&quot;">​</a></h3><p>Node.js事件循环基于<code>libuv</code>，<code>libuv</code>引入了<code>backend_fd</code>概念——<code>libuv</code>轮询事件的文件描述符；通过轮询<code>backend_fd</code>可以知道libuv`的新事件。</p><p>Electron创建一个新的安全线程轮询<code>backend_fd</code>，Node.js有新事件之后通过<code>PostTask</code>转发到chromium的事件循环中：</p><p><img src="'+s+'" alt="事件融合"></p>',13),i=[n];function l(m,_,h,p,u,b){return o(),a("div",null,i)}const P=e(d,[["render",l]]);export{f as __pageData,P as default};
